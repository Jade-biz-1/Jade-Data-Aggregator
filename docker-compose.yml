services:
  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: dataaggregator
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: bitnami/kafka:latest
    ports:
      - "9092:9092"
    environment:
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka:9093
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 5

  zookeeper:
    image: bitnami/zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      ALLOW_ANONYMOUS_LOGIN: yes

  backend:
    build: .
    ports:
      - "8001:8000"
    volumes:
      - ./backend:/app/backend
      - ./temp:/app/temp
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Database Configuration
      - POSTGRES_SERVER=db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=dataaggregator

      # Redis Configuration
      - REDIS_URL=redis://redis:6379/0

      # Kafka Configuration
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092

      # CORS Configuration - Allows frontend to communicate with backend
      # For production, customize these origins to match your domain
      - BACKEND_CORS_ORIGINS=["http://localhost", "http://localhost:3000", "http://localhost:8001", "http://frontend:3000"]

      # Environment Setting - Controls user creation and other behaviors
      # Options: development, staging, production
      - ENVIRONMENT=development

      # User Creation Flags - Only for development/testing
      # CREATE_DEV_USER: Automatically creates 'dev' user (dev/dev12345) when true
      # Set to 'false' in production for security
      - CREATE_DEV_USER=true

      # Production Safeguard - Prevents Developer role in production
      # Keep as 'false' in production environments
      - ALLOW_DEV_ROLE_IN_PRODUCTION=false

      # File Storage Paths (Phase 9: Service Decoupling)
      - TEMP_FILES_PATH=/app/temp
      - UPLOAD_PATH=/app/uploads
      - LOG_PATH=/app/logs
    command: python -m uvicorn backend.main:app --host 0.0.0.0 --port 8000 --reload

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    environment:
      # Backend API URL - Frontend uses this to communicate with backend
      # Must include /api/v1 path prefix
      - NEXT_PUBLIC_API_URL=http://localhost:8001/api/v1
    depends_on:
      - backend

volumes:
  postgres_data:
