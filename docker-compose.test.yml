# Docker Compose Test Environment
# Data Aggregator Platform - Isolated Testing Services
# Last Updated: October 23, 2025

services:
  # Test Database - PostgreSQL on port 5433
  test-db:
    image: postgres:15-alpine
    container_name: dataaggregator-test-db
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: dataaggregator_test
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
    volumes:
      - test_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d dataaggregator_test"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - test-network

  # Test Redis - Redis on port 6380
  test-redis:
    image: redis:7-alpine
    container_name: dataaggregator-test-redis
    ports:
      - "6380:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - test-network

  # Backend Test Server
  backend-test:
    build:
      context: .
      dockerfile: backend/Dockerfile.test
    container_name: dataaggregator-backend-test
    ports:
      - "8001:8000"
    environment:
      # Test Mode Flag
      - TEST_MODE=true
      - ENVIRONMENT=test

      # Test Database Configuration
      - POSTGRES_SERVER=test-db
      - POSTGRES_USER=test_user
      - POSTGRES_PASSWORD=test_password
      - POSTGRES_DB=dataaggregator_test
      - DATABASE_URL=postgresql+asyncpg://test_user:test_password@test-db:5432/dataaggregator_test

      # Test Redis Configuration
      - REDIS_HOST=test-redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - REDIS_URL=redis://test-redis:6379/0

      # JWT Configuration for Tests
      - JWT_SECRET_KEY=test-secret-key-for-testing-only
      - JWT_ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30

      # CORS Configuration for Test
      - BACKEND_CORS_ORIGINS=["http://localhost:3001", "http://frontend-test:3000"]

      # Disable External Services in Test
      - CREATE_DEV_USER=false
      - MOCK_EXTERNAL_SERVICES=true

    depends_on:
      test-db:
        condition: service_healthy
      test-redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/live"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - test-network
    volumes:
      - ./backend:/app/backend
      - ./testing:/app/testing

  # Frontend Test Server
  frontend-test:
    build:
      context: ./frontend
      dockerfile: Dockerfile.test
    container_name: dataaggregator-frontend-test
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=test
      - NEXT_PUBLIC_API_URL=http://localhost:8001
      - NEXT_PUBLIC_WS_URL=ws://localhost:8001/ws
    depends_on:
      backend-test:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - test-network
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next

networks:
  test-network:
    driver: bridge
    name: dataaggregator-test-network

volumes:
  test_postgres_data:
    name: dataaggregator-test-postgres-data
